package com.xlf.utility;

/**
 * 错误码
 * <p>
 * 用于定义错误码, 用于返回错误信息, 用于返回错误码
 *
 * @author xiao_lfeng
 * @version v1.0.1
 * @since v1.0.1
 */
@SuppressWarnings("unused")
public enum ErrorCode {
    /**
     * 服务器内部错误
     * <p>
     * 服务器内部错误, 用于定义服务器内部错误信息；
     * 该错误码为 50001，用于定义服务器内部错误信息；用于返回服务器内部错误信息。
     * <p>
     * 该错误码为 SERVER_INTERNAL_ERROR；该错误码为 50001； 该错误信息为 服务器内部错误。
     */
    SERVER_INTERNAL_ERROR("ServerInternalError", 50001, "服务器内部错误"),
    /**
     * 未知错误
     * <p>
     * 未知错误, 用于定义未知错误信息；
     * 该错误码为 50002，用于定义未知错误信息；用于返回未知错误信息。
     * <p>
     * 该错误码为 UNKNOWN_ERROR；该错误码为 50002； 该错误信息为 未知错误。
     */
    NOT_EXIST("NotExist", 40000, "内容不存在"),
    /**
     * 内容已存在
     * <p>
     * 内容已存在, 用于定义内容已存在信息；
     * 该错误码为 40001，用于定义内容已存在信息；用于返回内容已存在信息。
     * <p>
     * 该错误码为 EXISTED；该错误码为 40001； 该错误信息为 内容已存在。
     */
    EXISTED("Existed", 40001, "内容已存在"),
    /**
     * 参数错误
     * <p>
     * 参数错误, 用于定义参数错误信息；
     * 该错误码为 40002，用于定义参数错误信息；用于返回参数错误信息。
     * <p>
     * 该错误码为 PARAMETER_ERROR；该错误码为 40002； 该错误信息为 参数错误。
     */
    PARAMETER_ERROR("ParameterError", 40002, "参数错误"),
    /**
     * 参数缺失
     * <p>
     * 参数缺失, 用于定义参数缺失信息；
     * 该错误码为 40003，用于定义参数缺失信息；用于返回参数缺失信息。
     * <p>
     * 该错误码为 PARAMETER_MISSING；该错误码为 40003； 该错误信息为 参数缺失。
     */
    PARAMETER_MISSING("ParameterMissing", 40003, "参数缺失"),
    /**
     * 参数无效
     * <p>
     * 参数无效, 用于定义参数无效信息；
     * 该错误码为 40004，用于定义参数无效信息；用于返回参数无效信息。
     * <p>
     * 该错误码为 PARAMETER_INVALID；该错误码为 40004； 该错误信息为 参数无效。
     */
    PARAMETER_INVALID("ParameterInvalid", 40004, "参数无效"),
    /**
     * 参数非法
     * <p>
     * 参数非法, 用于定义参数非法信息；
     * 该错误码为 40005，用于定义参数非法信息；用于返回参数非法信息。
     * <p>
     * 该错误码为 PARAMETER_ILLEGAL；该错误码为 40005； 该错误信息为 参数非法。
     */
    PARAMETER_ILLEGAL("ParameterIllegal", 40005, "参数非法"),
    /**
     * 参数类型错误
     * <p>
     * 参数类型错误, 用于定义参数类型错误信息；
     * 该错误码为 40006，用于定义参数类型错误信息；用于返回参数类型错误信息。
     * <p>
     * 该错误码为 PARAMETER_TYPE_ERROR；该错误码为 40006； 该错误信息为 参数类型错误。
     */
    PARAMETER_TYPE_ERROR("ParameterTypeError", 40006, "参数类型错误"),
    /**
     * 请求体错误
     * <p>
     * 请求体错误, 用于定义请求体错误信息；
     * 该错误码为 40007，用于定义请求体错误信息；用于返回请求体错误信息。
     * <p>
     * 该错误码为 BODY_ERROR；该错误码为 40007； 该错误信息为 请求体错误。
     */
    BODY_ERROR("BodyError", 40007, "请求体错误"),
    /**
     * 请求体缺失
     * <p>
     * 请求体缺失, 用于定义请求体缺失信息；
     * 该错误码为 40008，用于定义请求体缺失信息；用于返回请求体缺失信息。
     * <p>
     * 该错误码为 BODY_MISSING；该错误码为 40008； 该错误信息为 请求体缺失。
     */
    BODY_MISSING("BodyMissing", 40008, "请求体缺失"),
    /**
     * 请求体无效
     * <p>
     * 请求体无效, 用于定义请求体无效信息；
     * 该错误码为 40009，用于定义请求体无效信息；用于返回请求体无效信息。
     * <p>
     * 该错误码为 BODY_INVALID；该错误码为 40009； 该错误信息为 请求体无效。
     */
    BODY_INVALID("BodyInvalid", 40009, "请求体无效"),
    /**
     * 请求体非法
     * <p>
     * 请求体非法, 用于定义请求体非法信息；
     * 该错误码为 40010，用于定义请求体非法信息；用于返回请求体非法信息。
     * <p>
     * 该错误码为 BODY_ILLEGAL；该错误码为 40010； 该错误信息为 请求体非法。
     */
    BODY_ILLEGAL("BodyIllegal", 40010, "请求体非法"),
    /**
     * 请求体类型错误
     * <p>
     * 请求体类型错误, 用于定义请求体类型错误信息；
     * 该错误码为 40011，用于定义请求体类型错误信息；用于返回请求体类型错误信息。
     * <p>
     * 该错误码为 BODY_TYPE_ERROR；该错误码为 40011； 该错误信息为 请求体类型错误。
     */
    BODY_TYPE_ERROR("BodyTypeError", 40011, "请求体类型错误"),
    /**
     * 请求头错误
     * <p>
     * 请求头错误, 用于定义请求头错误信息；
     * 该错误码为 40012，用于定义请求头错误信息；用于返回请求头错误信息。
     * <p>
     * 该错误码为 HEADER_ERROR；该错误码为 40012； 该错误信息为 请求头错误。
     */
    HEADER_ERROR("HeaderError", 40012, "请求头错误"),
    /**
     * 请求头缺失
     * <p>
     * 请求头缺失, 用于定义请求头缺失信息；
     * 该错误码为 40013，用于定义请求头缺失信息；用于返回请求头缺失信息。
     * <p>
     * 该错误码为 HEADER_MISSING；该错误码为 40013； 该错误信息为 请求头缺失。
     */
    HEADER_MISSING("HeaderMissing", 40013, "请求头缺失"),
    /**
     * 请求头无效
     * <p>
     * 请求头无效, 用于定义请求头无效信息；
     * 该错误码为 40014，用于定义请求头无效信息；用于返回请求头无效信息。
     * <p>
     * 该错误码为 HEADER_INVALID；该错误码为 40014； 该错误信息为 请求头无效。
     */
    HEADER_INVALID("HeaderInvalid", 40014, "请求头无效"),
    /**
     * 请求头非法
     * <p>
     * 请求头非法, 用于定义请求头非法信息；
     * 该错误码为 40015，用于定义请求头非法信息；用于返回请求头非法信息。
     * <p>
     * 该错误码为 HEADER_ILLEGAL；该错误码为 40015； 该错误信息为 请求头非法。
     */
    HEADER_ILLEGAL("HeaderIllegal", 40015, "请求头非法"),
    /**
     * 请求头类型错误
     * <p>
     * 请求头类型错误, 用于定义请求头类型错误信息；
     * 该错误码为 40016，用于定义请求头类型错误信息；用于返回请求头类型错误信息。
     * <p>
     * 该错误码为 HEADER_TYPE_ERROR；该错误码为 40016； 该错误信息为 请求头类型错误。
     */
    HEADER_TYPE_ERROR("HeaderTypeError", 40016, "请求头类型错误"),
    /**
     * 操作错误
     * <p>
     * 操作错误, 用于定义操作错误信息；
     * 该错误码为 40017，用于定义操作错误信息；用于返回操作错误信息。
     * <p>
     * 该错误码为 OPERATION_ERROR；该错误码为 40017； 该错误信息为 操作错误。
     */
    OPERATION_ERROR("OperationError", 40017, "操作错误"),
    /**
     * 操作失败
     * <p>
     * 操作失败, 用于定义操作失败信息；
     * 该错误码为 40018，用于定义操作失败信息；用于返回操作失败信息。
     * <p>
     * 该错误码为 OPERATION_FAILED；该错误码为 40018； 该错误信息为 操作失败。
     */
    OPERATION_FAILED("OperationFailed", 40018, "操作失败"),
    /**
     * 操作无效
     * <p>
     * 操作无效, 用于定义操作无效信息；
     * 该错误码为 40019，用于定义操作无效信息；用于返回操作无效信息。
     * <p>
     * 该错误码为 OPERATION_INVALID；该错误码为 40019； 该错误信息为 操作无效。
     */
    OPERATION_INVALID("OperationInvalid", 40019, "操作无效"),
    /**
     * 操作非法
     * <p>
     * 操作非法, 用于定义操作非法信息；
     * 该错误码为 40020，用于定义操作非法信息；用于返回操作非法信息。
     * <p>
     * 该错误码为 OPERATION_ILLEGAL；该错误码为 40020； 该错误信息为 操作非法。
     */
    OPERATION_ILLEGAL("OperationIllegal", 40020, "操作非法"),
    /**
     * 操作被拒绝
     * <p>
     * 操作被拒绝, 用于定义操作被拒绝信息；
     * 该错误码为 40021，用于定义操作被拒绝信息；用于返回操作被拒绝信息。
     * <p>
     * 该错误码为 OPERATION_DENIED；该错误码为 40021； 该错误信息为 操作被拒绝。
     */
    OPERATION_DENIED("OperationDenied", 40021, "操作被拒绝"),
    /**
     * 操作不允许
     * <p>
     * 操作不允许, 用于定义操作不允许信息；
     * 该错误码为 40022，用于定义操作不允许信息；用于返回操作不允许信息。
     * <p>
     * 该错误码为 OPERATION_NOT_ALLOWED；该错误码为 40022； 该错误信息为 操作不允许。
     */
    OPERATION_NOT_ALLOWED("OperationNotAllowed", 40022, "操作不允许"),
    /**
     * 操作不支持
     * <p>
     * 操作不支持, 用于定义操作不支持信息；
     * 该错误码为 40023，用于定义操作不支持信息；用于返回操作不支持信息。
     * <p>
     * 该错误码为 OPERATION_NOT_SUPPORTED；该错误码为 40023； 该错误信息为 操作不支持。
     */
    OPERATION_NOT_SUPPORTED("OperationNotSupported", 40023, "操作不支持"),
    /**
     * 操作类型错误
     * <p>
     * 操作类型错误, 用于定义操作类型错误信息；
     * 该错误码为 40024，用于定义操作类型错误信息；用于返回操作类型错误信息。
     * <p>
     * 该错误码为 OPERATION_TYPE_ERROR；该错误码为 40024； 该错误信息为 操作类型错误。
     */
    PAGE_NOT_FOUND("PageNotFound", 40401, "页面未找到"),
    /**
     * 未找到
     * <p>
     * 未找到, 用于定义未找到信息；
     * 该错误码为 40402，用于定义未找到信息；用于返回未找到信息。
     * <p>
     * 该错误码为 NOT_FOUND；该错误码为 40402； 该错误信息为 未找到。
     */
    METHOD_NOT_ALLOWED("MethodNotAllowed", 40501, "方法不允许"),
    /**
     * 方法不允许
     * <p>
     * 方法不允许, 用于定义方法不允许信息；
     * 该错误码为 40502，用于定义方法不允许信息；用于返回方法不允许信息。
     * <p>
     * 该错误码为 METHOD_NOT_ALLOWED；该错误码为 40502； 该错误信息为 方法不允许。
     */
    UNAUTHORIZED("Unauthorized", 40101, "未授权"),
    /**
     * 未授权
     * <p>
     * 未授权, 用于定义未授权信息；
     * 该错误码为 40102，用于定义未授权信息；用于返回未授权信息。
     * <p>
     * 该错误码为 UNAUTHORIZED；该错误码为 40102； 该错误信息为 未授权。
     */
    FORBIDDEN("Forbidden", 40301, "禁止访问"),
    /**
     * 禁止访问
     * <p>
     * 禁止访问, 用于定义禁止访问信息；
     * 该错误码为 40302，用于定义禁止访问信息；用于返回禁止访问信息。
     * <p>
     * 该错误码为 FORBIDDEN；该错误码为 40302； 该错误信息为 禁止访问。
     */
    BAD_REQUEST("BadRequest", 40000, "错误请求"),
    /**
     * 错误请求
     * <p>
     * 错误请求, 用于定义错误请求信息；
     * 该错误码为 40001，用于定义错误请求信息；用于返回错误请求信息。
     * <p>
     * 该错误码为 BAD_REQUEST；该错误码为 40001； 该错误信息为 错误请求。
     */
    NOT_ACCEPTABLE("NotAcceptable", 40601, "不可接受");

    /**
     * 输出
     */
    private final String output;
    /**
     * 错误码
     */
    private final Integer code;
    /**
     * 错误信息
     */
    private final String message;

    ErrorCode(String output, Integer code, String message) {
        this.output = output;
        this.code = code;
        this.message = message;
    }

    /**
     * 获取输出
     * <p>
     * 该输出为英文输出, 用于输出错误信息的英文信息。
     *
     * @return String 输出(英文)
     */
    public String getOutput() {
        return output;
    }

    /**
     * 获取错误码
     * <p>
     * 该数字由 5 位数字组成, 用于定义系统中的错误码信息, 用于统一管理系统中的错误码信息。
     *
     * @return Integer 错误码(00000)
     */
    public Integer getCode() {
        return code;
    }

    /**
     * 获取错误信息
     * <p>
     * 该信息为中文信息, 用于定义系统中的错误信息, 用于统一管理系统中的错误信息。
     *
     * @return String 错误信息(中文)
     */
    public String getMessage() {
        return message;
    }
}
